# -*- coding: utf-8 -*-
"""text-calc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tc2Vwbdy4_JdWvujAR69mrXZ4cqsOIJ_
"""

numbers = {
    "ноль": 0, "один": 1, "два": 2, "три": 3, "четыре": 4, "пять": 5, "шесть": 6, "семь": 7, "восемь": 8, "девять": 9,
    "десять": 10, "одиннадцать": 11, "двенадцать": 12, "тринадцать": 13, "четырнадцать": 14, "пятнадцать": 15,
    "шестнадцать": 16, "семнадцать": 17, "восемнадцать": 18, "девятнадцать": 19, "двадцать": 20,
    "тридцать": 30, "сорок": 40, "пятьдесят": 50, "шестьдесят": 60, "семьдесят": 70, "восемьдесят": 80, "девяносто": 90
}

operations = {
    "плюс": "+",
    "минус": "-",
    "умножить": "*"
}

def text_to_number(text):
    parts = text.split()
    number = 0
    for part in parts:
        if part in numbers:
            number += numbers[part]
    return number

def number_to_text(number):
    if number in numbers.values():
        return list(numbers.keys())[list(numbers.values()).index(number)]
    tens = (number // 10) * 10
    units = number % 10
    text = ""
    if tens:
        text += list(numbers.keys())[list(numbers.values()).index(tens)]
    if units:
        if text:
            text += " "
        text += list(numbers.keys())[list(numbers.values()).index(units)]
    return text

fractions = {
    "десятая": 0.1, "десятых": 0.1,
    "сотая": 0.01, "сотых": 0.01,
    "тысячная": 0.001, "тысячных": 0.001,
}


def text_to_number_with_fraction(text):
    if "и" not in text:
        return text_to_number(text)

    parts = text.split(" и ")
    whole_part = text_to_number(parts[0]) if parts[0] else 0

    fraction_part = 0
    if len(parts) > 1:
        fraction_tokens = parts[1].split()
        print(fraction_tokens)
        if len(fraction_tokens) == 3 and fraction_tokens[2] in fractions:
            print(fraction_tokens[0], fraction_tokens[1])
            fraction_value = text_to_number(fraction_tokens[0] + " " + fraction_tokens[1])
            fraction_part = fraction_value * fractions[fraction_tokens[2]]

    return whole_part + fraction_part

# def text_to_number_with_fraction(text):
#     """Преобразование текста в число с учетом дробных частей."""
#     if "и" not in text:
#         return text_to_number(text)

#     parts = text.split(" и ")
#     whole_part = text_to_number(parts[0]) if parts[0] else 0

#     fraction_part = 0
#     if len(parts) > 1:
#         fraction_tokens = parts[1].split()
#         if len(fraction_tokens) >= 2 and fraction_tokens[-1] in fractions:
#             fraction_value = text_to_number(" ".join(fraction_tokens[:-1]))
#             fraction_part = fraction_value * fractions[fraction_tokens[-1]]

#     return whole_part + fraction_part


def calc(expression: str):
    tokens = expression.split()

    # Первая часть числа
    num1_tokens = []
    while tokens and (tokens[0] in numbers or tokens[0] in {"и", "одна", "две", "десятых", "десятая", "сотых", "тысячных"}):
        num1_tokens.append(tokens.pop(0))

    print(num1_tokens)
    num1 = text_to_number_with_fraction(" ".join(num1_tokens))
    print(num1)

    if not tokens:
        raise ValueError("Неверный формат выражения. Ожидается операция.")

    # Операция
    operation = tokens.pop(0)
    print(operation)
    if operation in operations:
        operation = operations[operation]
    elif operation == "разделить":
        operation = "/"
    else:
        raise ValueError(f"Неизвестная операция: {operation}")

    if tokens and tokens[0] in {"на", "с", "в"}:
        tokens.pop(0)

    num2_tokens = []
    while tokens and (tokens[0] in numbers or tokens[0] in {"и", "одна", "две", "десятых", "десятая", "сотых", "тысячных"}):
        num2_tokens.append(tokens.pop(0))
    num2 = text_to_number_with_fraction(" ".join(num2_tokens))

    if operation == "+":
        result = num1 + num2
    elif operation == "-":
        result = num1 - num2
    elif operation == "*":
        result = num1 * num2
    elif operation == "/":
        if num2 == 0:
            raise ZeroDivisionError("Деление на ноль.")
        result = num1 / num2
    else:
        raise ValueError("Операция не поддерживается")

    # return text_to_number_with_fraction(result)
    return number_to_text(result)

# Тесты
# print(calc("сорок один и тридцать одна сотая разделить на семнадцать"))  # должно вывести "два и сорок три тысячных"
# print(calc("двадцать пять и пять десятых плюс тридцать"))  # должно вывести "пятьдесят пять и пять десятых"

calc("один и одна десятая плюс один")

